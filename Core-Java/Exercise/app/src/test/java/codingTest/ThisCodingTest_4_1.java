package codingTest;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * 상하좌우
 */

/**
 * 1. 문제에 대한 이해
 * * 우리가 풀어야 할 문제는 무엇인가?
 * >> 계획서가 주어졌을 때 여행가 A가 최종적으로 도착할 지점의 좌표를 출력하는 프로그램을 작성하세요.
 * * 주어진 자료는 무엇인가?
 * >> 정사각형 : N x N 크기의 공간
 * >> 계획서 : L, R, U, D 하나의 문자로 반복적으로 적혀있다.
 * >> L: 왼쪽으로 한 칸 이동
 * >> R : 오른쪽으로 한 칸 이동
 * >> U : 위로 한 칸 이동
 * >> D : 아래로 한 칸 이동
 * >> 좌표
 * >> 시작 좌표 : (1,1)에서 시작합니다.
 * >> 도착 좌표 : 계획서에 따라 움직이고 나서 마지막에 도착 된 위치
 * >> 정사각형의 크기를 설정하고, 계획서의 이동 계획에 따라 도착 된 좌표를 출력한다.
 * * 조건은 무엇인가?
 * >> N x N 크기의 정사격형 공간을 벗어나는 움직임은 무시 된다.
 * >> (1, 1) L 혹은 U를 만나면 무시된다.
 * <p>
 * ## 2. 계획
 * >> 정사각형의 i x i를 만든다.
 * >> 계획서 L,R,U,D 이동 위치를 설정한다.
 * >> 동서남북을 좌표 위치로 표현한다.
 * >> 시작 위치 (1,1)를 설정한다.
 * >> 이동 후 좌표 구하기
 * >> 계획서가 좌표를 벗어나면 무시하기
 * >> 이동 후 좌표 값 리턴한다.
 * <p>
 * <p>
 * ## 3. 실행
 * * 풀이 계획을 실행하고, 각 단계가 올바른지 점검하라.
 * <p>
 * ## 4. 반성
 * * 문제를 다른 방식으로 해결할 수 있는가?
 * * 결과나 방법을 어떤 다른 문제에 활용할 수 있는가?
 * * 어떻게 하면 더 효율적으로 문제를 해결할 수 있는가?
 * * 어떻게 하면 더 효과적으로 문제를 해결할 수 있는가?
 */

public class ThisCodingTest_4_1 {

    public int solution(int n, String str) {

        // 시작 위치
        var x = 1;
        var y = 1;

        // L, R, U, D에 따른 이동 방향
        String[] move_type = {"L", "R", "U", "D"};

        // 이동 좌표 구하기



        return 0;
    }

    @Test
    void result() {

        assertThat(solution(5, "R R R U D D ")).isEqualTo(0);

    }
}
